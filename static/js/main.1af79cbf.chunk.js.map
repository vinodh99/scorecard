{"version":3,"sources":["actions/updateroi.js","constants/actionTypes.js","components/roiTable.js","components/cards.js","components/scorecard.js","reducers/initialState.js","reducers/updateroi.js","reducers/index.js","routes.js","store/configureStore.js","App.js","serviceWorker.js","index.js"],"names":["updateroi","gtm","gfx","ghc1","ghc2","gql","coi","type","RoiTable","dataSource","this","props","roiValues","console","log","react_default","a","createElement","table","className","columns","title","dataIndex","Component","Cards","Card","Meta","Form","Item","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleVisibleChange","visible","setState","handleMessageInput","e","defineProperty","target","name","value","calcutateROI","parseFloat","state","dispatch","GTM","rpy","rie","GQL","fpy","rpm","min","isNaN","GHC1","ias","hpw","ish","GHC2","das","ds","tpr","GFX","aar","por","onChange","tooltipDisplay","def","tooltip","placement","icon","onChange1","roi","_this2","getFieldDecorator","form","style","background","height","row","gutter","col","span","paddingBottom","paddingTop","paddingLeft","card","textAlign","bordered","toFixed","alignItems","input","onPressEnter","placeholder","size","popover","alignContent","content","es_form","assign","labelCol","xs","sm","wrapperCol","label","rules","required","defaultValue","trigger","onVisibleChange","fontWeight","paddingRight","justifyContent","borderRadius","slider","max","onAfterChange","step","Span","offset","hoverable","roiTable","wrappedCards","create","connect","updatedRoi","calcValues","Header","Layout","Content","Footer","DashBoard","Sider","Menu","SubMenu","data","menu","key","href","layout","minHeight","padding","src","alt","width","color","dropdown","overlay","fontFamily","margin","components_cards","initialState","arr","rootReducer","combineReducers","arguments","length","undefined","action","newState","objectSpread","time","Date","ch","getHours","cm","getMinutes","push","concat","store","createStore","reducer","configureStore","routes","BrowserRouter","es","Switch","Route","exact","path","render","components_scorecard","Redirect","to","App","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1af79cbf.chunk.js","sourcesContent":["import * as types from '../constants/actionTypes';\n\nexport const updateroi = (gtm, gfx, ghc1, ghc2, gql, coi) => ({\n    type: types.UPDATE_ROI,\n    gtm,\n    gfx,\n    ghc1,\n    ghc2,\n    gql,\n    coi\n})\n","export const UPDATE_ROI = 'UPDATE_ROI';\n","import React, { Component } from 'react';\nimport 'antd/dist/antd.css';\nimport { Table, Divider, Tag } from 'antd';\n\nclass RoiTable extends Component {\n    // constructor(props) {\n    //     super(props)\n    // }\n    render() {\n        const dataSource = this.props.roiValues;\n        console.log(dataSource)\n        const columns = [{\n            title: 'ROI',\n            dataIndex: 'name',\n        }, {\n            title: 'Time',\n            dataIndex: 'time'\n        }];\n        return (\n            <div>\n                <p><Table className='table' dataSource={dataSource} columns={columns} /></p>\n            </div>\n        )\n    }\n}\n\nexport default RoiTable;","import React, { Component } from 'react';\nimport { Card, Row, Col, Slider, InputNumber, Form, Input, Tooltip, Icon, Popover } from 'antd';\nimport './cards.css';\nimport './carousal.css';\nimport { updateroi } from '../actions/updateroi';\nimport { connect } from 'react-redux';\nimport RoiTable from './roiTable';\nconst { Meta } = Card;\nconst FormItem = Form.Item;\n\nclass Cards extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            visible: false,\n            min: '28.3',\n            rie: '1.04',\n            coi: '20',\n            rpy: '',\n            fpy: '',\n            gtm: 0,\n            gql: 0,\n            ghc1: 0,\n            ghc2: 0,\n            gfx: 0,\n            rpm: '',\n            ias: '',\n            ish: '',\n            das: '',\n            ds: '',\n            aar: '',\n            roi: 0,\n            por: '0.036',\n            hpw: '0.16',\n            tpr: '0.18',\n\n        }\n    }\n    handleVisibleChange = (visible) => {\n        this.setState({\n            visible\n        });\n    }\n    handleMessageInput = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    calcutateROI = (name) => {\n\n        let coi = parseFloat(this.state.coi, 10);\n        if (this.state.gtm !== 0 && this.state.gql !== 0 && this.state.gfx !== 0 && this.state.ghc1 !== 0 && this.state.ghc2 !== 0 && coi)\n            this.props.dispatch(updateroi(this.state.gtm, this.state.gfx, this.state.ghc1, this.state.ghc2, this.state.gql, coi))\n\n    }\n    GTM = () => {\n        let rpy = parseFloat(this.state.rpy, 10);\n        let rie = parseFloat(this.state.rie, 10);\n        if (rpy !== 0 && rie !== 0) {\n            let gtm = rpy * rie;\n            this.setState({\n                gtm: gtm\n            })\n            this.calcutateROI();            // return gtm;\n        }\n    }\n    GQL = () => {\n        let fpy = parseFloat(this.state.fpy, 10);\n        let rpm = parseFloat(this.state.rpm, 10);\n        let min = parseFloat(this.state.min, 10);\n        if (fpy !== 0 && rpm !== 0 && !isNaN(fpy) && !isNaN(rpm)) {\n            let gql = fpy * min * rpm;\n            this.setState({\n                gql: gql\n            })\n            this.calcutateROI();\n        }\n    }\n    GHC1 = () => {\n        let ias = parseFloat(this.state.ias, 10);\n        let hpw = parseFloat(this.state.hpw, 10);\n        let ish = parseFloat(this.state.ish, 10);\n        if (ias !== 0 && !isNaN(ias) && ish !== 0 && !isNaN(ish)) {\n            let ghc1 = ias * ish * hpw;\n            this.setState({\n                ghc1\n            })\n            this.calcutateROI();\n        }\n\n    }\n    GHC2 = () => {\n        let das = parseFloat(this.state.das, 10);\n        let ds = parseFloat(this.state.ds, 10);\n        let tpr = parseFloat(this.state.tpr, 10);\n        if (das !== 0 && !isNaN(das) && ds !== 0 && !isNaN(ds)) {\n            let ghc2 = das * ds * tpr;\n            this.setState({\n                ghc2\n            })\n        }\n        this.calcutateROI();\n    }\n\n    GFX = () => {\n        let aar = parseFloat(this.state.aar, 10);\n        let por = parseFloat(this.state.por, 10);\n        if (aar !== 0 && por !== 0) {\n            let gfx = aar * por;\n            this.setState({\n                gfx\n            })\n            this.calcutateROI()\n        }\n    }\n    onChange = (e, name) => {\n        console.log(e)\n        this.setState({\n            [name]: e\n        });\n    }\n\n\n    tooltipDisplay = (def) => {\n        return (\n            <Tooltip placement=\"topLeft\" title={def} >\n                <Icon type=\"exclamation-circle\" />\n            </Tooltip>\n        )\n    }\n\n    tooltip = (def) => {\n        switch (def) {\n            case 'tricd':\n                return this.tooltipDisplay('Time reduction by implementing continuous delivery');\n            case 'tsrca':\n                return this.tooltipDisplay('Time spent on root cause analysis');\n            case 'tdspr':\n                return this.tooltipDisplay('Time developers spend on problem resolution');\n            default:\n                return 'not defined';\n        }\n    }\n    onChange1 = () => {\n        // console.log(\"hello\")\n        this.calcutateROI();\n    }\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: { span: 24 },\n                sm: { span: 8 },\n            },\n            wrapperCol: {\n                xs: { span: 24 },\n                sm: { span: 8 },\n            },\n        };\n        // console.log(this.props)\n        const { coi } = this.state;\n        const { gtm } = this.state;\n        const { gql } = this.state;\n        const { ghc1 } = this.state;\n        const { ghc2 } = this.state;\n        const { gfx } = this.state;\n\n        return (\n            <div style={{ background: '#ECECEC', height: 750 }} >\n                <Row gutter={5} >\n                    <Col span={20} >\n                        <Row className=\"row\"\n                            gutter={25}\n                            style={{ paddingBottom: 25, paddingTop: 15, paddingLeft: 15 }} >\n                            <Col span={12} >\n                                <Card className=\"card\"\n                                    style={{ background: '#BCC0C2', textAlign: 'center', height: 237 }}\n                                    bordered={false} >\n                                    <p>\n                                        Revenue gains from accelerated time to market of new functionality <br /> (GTM) </p>\n                                    <h1 >\n                                        GTM: {\n                                            this.state.gtm.toFixed(2)\n                                        }\n                                    </h1>\n                                    <Row >\n                                        <Col span={\n                                            12\n                                        }\n                                            style={\n                                                {\n                                                    alignItems: 'center'\n                                                }\n                                            } >\n                                            <p > Revenue Per Year < br />\n\n                                                { /* <Col span={6} offset={9} > */}\n                                                <Input name=\"rpy\"\n                                                    type=\"number\"\n                                                    className=\"rpy-input\"\n                                                    value={this.state.rpy}\n                                                    onChange={this.handleMessageInput}\n                                                    onPressEnter={this.GTM}\n                                                    placeholder=\"rpy\"\n                                                    size=\"small\"\n                                                />\n                                                { /* </Col> */}\n                                            </p>\n                                        </Col >\n                                        <Col span={\n                                            12\n                                        } >\n                                            <p> Revenue Increase Estimate\n                                                <Popover\n                                                    alignContent=\"center\"\n                                                    content={<p>(default value is set to {this.state.rie}, can be changed below)<br />\n                                                        <Form.Item\n                                                            // alignContent=\"center\"\n                                                            {...formItemLayout}\n                                                            label=\"RIE\"\n                                                        >\n                                                            {getFieldDecorator('number', {\n                                                                rules: [{\n                                                                    required: false,\n                                                                }],\n                                                            })(\n                                                                <Input\n                                                                    className=\"rpy-input\"\n                                                                    // height\n                                                                    textAlign='center'\n                                                                    name='rie'\n                                                                    onChange={this.handleMessageInput}\n                                                                    value={this.state.rie}\n                                                                    defaultValue='110/115'\n                                                                    onPressEnter={this.GTM}\n                                                                />)}\n                                                        </Form.Item>\n                                                    </p>}\n                                                    trigger=\"click\"\n                                                    visible={this.state.visible}\n                                                    onVisibleChange={this.handleVisibleChange} >\n                                                    <Icon type=\"question-circle-o\" />\n                                                </Popover><br /> < span style={{ fontWeight: 'bold' }} > {this.state.rie} </span></p >\n                                        </Col> </Row > </Card>\n                            </Col>\n                            <Col span={12} >\n                                <Card className=\"card\"\n                                    style={{ background: /*'#33CCF4'*/ '#BCC0C2', textAlign: 'center', height: 237 }}\n                                    bordered={false} >\n                                    <p > Gain from flexibility in the IT environment <br /> (GFX) </p>\n                                    <h1 > GFX: {this.state.gfx.toFixed(2)} </h1>\n                                    <Row >\n                                        <Col span={12}\n                                            style={{ alignItems: 'center' }} >\n                                            <p> Application Annual Revenue <br />\n                                                <Input\n                                                    name=\"aar\"\n                                                    type=\"number\"\n                                                    className=\"aar-input\"\n                                                    value={this.state.aar}\n                                                    onChange={this.handleMessageInput}\n                                                    onPressEnter={this.GFX}\n                                                    placeholder=\"aar\"\n                                                    size=\"small\"\n                                                />\n                                            </p>\n                                        </Col >\n                                        <Col span={12} >\n                                            <p> 72 % Avg TCO reduction x5 % cost of IT as percentage of revenue <br /> < span style={{ fontWeight: 'bold' }} > {this.state.por} </span></p>\n                                        </Col>\n                                    </Row >\n                                </Card>\n                            </Col >\n                        </Row>\n                        <Row className=\"row\" gutter={25}\n                            style={{ paddingLeft: 15, paddingRight: 10, paddingBottom: 25 }} >\n                            <Col span={12} >\n                                <Card className=\"card\" style={\n                                    {\n                                        background: '#BCC0C2' /*'#FECA4F'*/,\n                                        textAlign: 'center',\n                                        height: 320\n                                    }\n                                }\n                                    bordered={\n                                        false\n                                    }>\n                                    <p >\n                                        Gains from enhanced IT team productivity and cost reduction of IT headcount waste(GHC) </p>\n                                    <h4 >\n                                        GHC(IT Ops): {\n                                            this.state.ghc1.toFixed(2)\n                                        }\n                                    </h4>\n                                    <Row gutter={10} >\n                                        <Col span={8}\n                                            style={\n                                                {\n                                                    alignItems: 'center'\n                                                }\n                                            } >\n                                            <p> IT average salary <br /> { /* <Col span={8} offset={7} style={{ alignItems: 'center' }}> */}\n                                                <Input\n                                                    name=\"ias\"\n                                                    className=\"ias-input\"\n                                                    type=\"number\"\n                                                    value={this.state.ias}\n                                                    onPressEnter={this.GHC1}\n                                                    onChange={this.handleMessageInput}\n                                                    placeholder='ias'\n                                                    size=\"small\" />\n                                            </p>\n                                        </Col>\n                                        <Col span={8} >\n                                            <p > 7.2 / 45 saving hours per week / total hours <br /> < span style={{ fontWeight: 'bold' }} > {this.state.hpw} </span></p >\n                                        </Col>\n                                        <Col span={8} >\n                                            <p > IT staff headcount <br />\n                                                <Input className='aar-input'\n                                                    name=\"ish\"\n                                                    type=\"number\"\n                                                    value={this.state.ish}\n                                                    onPressEnter={this.GHC1}\n                                                    onChange={this.handleMessageInput}\n                                                    placeholder='ish'\n                                                    size=\"small\"\n                                                />\n                                            </p>\n                                        </Col>\n                                    </Row >\n                                    <h4 >\n                                        GHC(Developers): {\n                                            this.state.ghc2.toFixed(2)\n                                        } </h4>\n                                    <Row gutter={10} >\n                                        <Col span={8}\n                                            style={{ alignItems: 'center' }} >\n                                            <p > Developer average salary <br />\n                                                <Input\n                                                    name=\"das\"\n                                                    type=\"number\"\n                                                    value={this.state.das}\n                                                    onPressEnter={this.GHC2}\n                                                    onChange={this.handleMessageInput}\n                                                    placeholder=\"das\"\n                                                    className=\"aar-input\"\n                                                    size=\"small\" />\n                                            </p>\n                                        </Col>\n                                        <Col span={8} >\n                                            <p > Dev staff<br />\n                                                <Input\n                                                    name=\"ds\"\n                                                    type=\"number\"\n                                                    value={this.state.ds}\n                                                    onPressEnter={this.GHC2}\n                                                    onChange={this.handleMessageInput}\n                                                    placeholder=\"ds\"\n                                                    className=\"aar-input\"\n                                                    size=\"small\" />\n                                            </p>\n                                        </Col>\n                                        <Col span={8} >\n                                            <p > 60 % TRICD {\n                                                this.tooltip('tricd')\n                                            } x 75 % TSRCA {this.tooltip('tsrca')} x 40 % TDSPR {this.tooltip('tdspr')} <br /> < span style={{ fontWeight: 'bold' }} > {this.state.tpr} minutes </span></p >\n                                        </Col>\n                                    </Row >\n                                </Card>\n                            </Col >\n                            <Col span={12} >\n                                <Card className=\"card\" style={{\n                                    background: /*'#35D385'*/ '#BCC0C2',\n                                    textAlign: 'center',\n                                    height: 320\n                                }\n                                }\n                                    bordered={\n                                        false\n                                    } >\n                                    <p > Gains from cost reduction of application failures resulting from increased quality(GQL) </p>\n                                    <h1> GQL: {this.state.gql.toFixed(2)}\n                                    </h1>\n                                    <Row gutter={10} >\n                                        <Col span={8}\n                                            style={\n                                                {\n                                                    alignItems: 'center'\n                                                }\n                                            } >\n                                            <p > Failures Per Year <br />\n                                                <Input\n                                                    className='aar-input'\n                                                    name=\"fpy\"\n                                                    type=\"number\"\n                                                    value={this.state.fpy}\n                                                    onPressEnter={this.GQL}\n                                                    onChange={this.handleMessageInput}\n                                                    size=\"small\"\n                                                    placeholder='fpy' />\n                                            </p>\n                                        </Col>\n                                        <Col span={8} >\n                                            <p > Average Minutes to recover difference <br /> < span style={{ fontWeight: 'bold' }} > {this.state.min}\n                                                minutes </span></p >\n                                        </Col>\n                                        <Col span={8}\n                                            style={{ textAlign: 'center' }} >\n                                            <p > Revenue per minute <br /> { /* <Col span={10} offset={7} style={{ textAlign: 'center' }}> */} { /* <Row> */}\n                                                <Input\n                                                    className='aar-input'\n                                                    name=\"rpm\"\n                                                    type=\"number\"\n                                                    value={this.state.rpm}\n                                                    onPressEnter={this.GQL}\n                                                    onChange={this.handleMessageInput}\n                                                    size=\"small\"\n                                                    placeholder='rpm' />\n                                                <br /> Minutes </p>\n                                        </Col >\n                                    </Row>\n                                </Card >\n                            </Col>\n                        </Row >\n                        <Row className=\"row\" gutter={5}\n                            style={\n                                {\n                                    paddingTop: 5,\n                                    paddingLeft: 15\n                                }\n                            } >\n                            <Col >\n                                <Card className=\"card\"\n                                    style={{\n                                        background: '#535353a',\n                                        textAlign: 'center',\n                                        height: 300,\n                                        justifyContent: 'center',\n                                        borderRadius: 10,\n                                    }\n                                    }\n                                    bordered={\n                                        false\n                                    } > { /* <div> */}\n                                    <p >\n                                        Return Of Investment\n                                    </p>\n                                    <h1 > ROI: {\n                                        this.props.roi.toFixed(2)\n                                    } </h1>\n                                    <Row >\n                                        <Col span={12} >\n                                            <p > Cost Of Investment: </p>\n                                            <Slider\n                                                className=\"slider\"\n                                                min={1}\n                                                max={1000}\n                                                onChange={e => this.onChange(e, \"coi\")}\n                                                onAfterChange={e => this.onChange1(e)}\n                                                name=\"coi\"\n                                                value={typeof coi === 'number' ? coi : 0}\n                                                step={0.01}\n                                            />\n                                            <p > GTM </p><Slider\n                                                className=\"slider\"\n                                                min={1}\n                                                max={1000}\n                                                onChange={e => this.onChange(e, \"gtm\")}\n                                                onAfterChange={e => this.onChange1(e)}\n                                                name='gtm'\n                                                value={typeof gtm === 'number' ? gtm : 0\n                                                }\n                                                step={0.01}\n                                            />\n                                            <p > GQL </p><Slider\n                                                className=\"slider\"\n                                                min={1}\n                                                max={1000}\n                                                onChange={e => this.onChange(e, \"gql\")}\n                                                onAfterChange={e => this.onChange1(e)}\n                                                name='gql'\n                                                value={typeof gql === 'number' ? gql : 0}\n                                                step={0.01}\n                                            />\n                                        </Col >\n                                        <Col span={12} >\n                                            < p > GHC(Developers) </p><Slider\n                                                className=\"slider\"\n                                                min={1}\n                                                max={1000}\n                                                onChange={e => this.onChange(e, \"ghc1\")}\n                                                onAfterChange={e => this.onChange1(e)}\n                                                name='ghc1'\n                                                value={typeof ghc1 === 'number' ? ghc1 : 0}\n                                                step={0.01}\n                                            />\n                                            <p > GHC(IT ops) </p>\n                                            <Slider\n                                                className=\"slider\"\n                                                min={1}\n                                                max={1000}\n                                                onChange={e => this.onChange(e, \"ghc2\")}\n                                                onAfterChange={e => this.onChange1(e)}\n                                                name='ghc2'\n                                                value={typeof ghc2 === 'number' ? ghc2 : 0}\n                                                step={0.01}\n                                            />\n                                            <p > GFX </p> <Slider\n                                                className=\"slider\"\n                                                min={1}\n                                                max={1000}\n                                                onChange={e => this.onChange(e, \"gfx\")}\n                                                onAfterChange={e => this.onChange1(e)}\n                                                name='gfx'\n                                                value={typeof gfx === 'number' ? gfx : 0}\n                                                step={0.01}\n                                            />\n                                        </Col >\n                                    </Row>\n                                </Card>\n                            </Col >\n                        </Row>\n                    </Col >\n                    <Col Span={4}\n                        offset={20}\n                        style={{\n                            textAlign: 'center',\n                            paddingBottom: 10,\n                            paddingTop: 15,\n                            paddingLeft: 5,\n                            // paddingRight: 10\n                        }\n                        } >\n                        <Card className=\"card\" hoverable style={\n                            {\n                                background: 'grey',\n                                textAlign: 'center',\n                                alignContent: 'center',\n                                height: 915,\n                                borderRadius: '10px'\n                            }\n                        }\n                            bordered={\n                                false\n                            } >\n                            <p></p>\n                            <p>{<RoiTable {...this.props} />}</p>\n                        </Card >\n                        {/* </div> */}\n                    </Col>\n                </Row >\n            </div >\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    // console.log('hello ' + JSON.stringify(state))\n    console.log(state)\n    return {\n        roi: state.updatedRoi.roi,\n        roiValues: state.updatedRoi.calcValues\n    }\n}\nconst wrappedCards = Form.create()(Cards)\n\nexport default connect(mapStateToProps)(wrappedCards);","import React, { Component } from 'react';\nimport './scorecard.css';\nimport { Layout, Menu, Icon, Row, Col, Dropdown } from 'antd';\nimport Cards from './cards';\n\nconst { Header, Content, Footer, Sider } = Layout;\nconst SubMenu = Menu.SubMenu;\n\n\nclass DashBoard extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        };\n    }\n\n\n    render() {\n        const data = (\n            <Menu>\n                <Menu.Item key=\"0\">\n                    <a href=\"http://www.alipay.com/\">change RIE</a>\n                </Menu.Item>\n                <Menu.Item key=\"1\">\n                    <a href=\"http://www.taobao.com/\">change Avg Minutes for GQL</a>\n                </Menu.Item>\n                {/* <Menu.Divider /> */}\n                <Menu.Item key=\"3\">change saving Hours for GHC (IT Ops)</Menu.Item>\n                <Menu.Item key=\"3\">Time developers spend on problems for GHC(Dev)</Menu.Item>\n\n            </Menu>\n        );\n        return (\n            <div >\n                <Layout style={{ minHeight: '100vh' }}>\n                    <Layout>\n                        <Header className=\"card\" style={{ background: '#525252', padding: 0 }} >\n                            <Row style={{ alignContent: 'center' }}>\n                                <Col span={8} style={{ alignContent: 'center', paddingLeft: 20 }}>\n                                    <img src=\"https://rsrit.com/wp-content/uploads/2017/12/logo_dark.png\" alt=\"reliable\" width=\"150px\" height=\"50px\"></img>\n                                </Col>\n                                <Col span={8} style={{ fontWeight: 'bold', color: '#0066c', textAlign: 'left', paddingLeft: 65 }}>\n                                    <h1 style={{ fontWeight: 'bold', color: '#0066c' }}>SCORECARD</h1>\n                                </Col>\n                                <Col span={8} >\n                                    <Dropdown style={{ background: '#525252' }} overlay={data} trigger={['click']}>\n                                        <h1 className=\"ant-dropdown-link\" style={{ paddingRight: 40, fontWeight: 'bold', color: '#0066c', fontFamily: 'Cochin', textAlign: 'right' }}>\n                                            <Icon className=\"custom-icon\" type=\"setting\" />\n                                        </h1>\n                                    </Dropdown>\n\n                                </Col>\n                            </Row>\n                        </Header>\n                        <Content style={{ alignItems: 'center', margin: '24px 16px', padding: 24, background: '#fff', minHeight: 580 }}>\n                            <Cards {...this.props} />\n                        </Content>\n                        <Footer style={{ textAlign: 'center' }}>\n                        </Footer>\n                    </Layout>\n                </Layout >\n            </div >\n        );\n    }\n}\n\n\n\nexport default DashBoard;\n\n","export default {\n    roi: 0,\n    calcValues: []\n}","import initialState from './initialState';\nimport * as types from '../constants/actionTypes';\n\nconst arr = [];\nconst updateroi = (state, action) => {\n    // console.log('im reducer')\n    let newState = { ...state };\n    // if (action.gtm !== 0 && action.gql !== 0 && action.gfx !== 0 && action.ghc1 !== 0 && this.state.ghc2 !== 0) {\n    let roi = (((action.gtm + action.gql + action.ghc1 + action.ghc2 + action.gfx) - action.coi) / action.coi) * 100;\n    let time = new Date();\n    let ch = time.getHours();\n    let cm = time.getMinutes();\n    arr.push({ name: roi.toFixed(2), time: `${ch}:${cm}hrs` });\n\n    // time.push(new Date());\n    // if (roi !== NaN)\n    return roi ? (newState = Object.assign({}, state, { roi, calcValues: arr })) : { ...newState };\n    // return { ...newState };\n    // }\n    // return state;\n}\n\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case types.UPDATE_ROI:\n            return updateroi(state, action);\n        default:\n            return state;\n    }\n}","import updatedRoi from './updateroi';\nimport { combineReducers } from 'redux';\nconst rootReducer = combineReducers({\n    updatedRoi\n})\n\nexport default rootReducer;\n","import React from \"react\";\nimport { Route, Switch, Redirect, BrowserRouter } from \"react-router-dom\";\n//import Carousal from \"./components/carousal\";\nimport Scorecard from './components/scorecard';\nimport configureStore from './store/configureStore';\nimport { Provider } from 'react-redux';\n\nconst store = configureStore();\nexport default () => {\n    return (\n\n\n\n        <BrowserRouter>\n            <Provider store={store}>\n                <Switch>\n                    {/* <Route exact path=\"/carousel\" render={props => <Carousal {...props} />} /> */}\n                    <Route exact path=\"/scorecard\" render={props => <Scorecard {...props} />} />\n                    {/* <Route exact path=\"/home\" render={props => <Home {...props} />} />\n        <Route exact path=\"/createNewRequest\" render={props => <CreateNewRequest {...props} />} /> */}\n\n                    <Redirect to=\"/scorecard\" />\n                </Switch>\n            </Provider>\n        </BrowserRouter>\n    );\n};","import { createStore } from 'redux';\nimport reducer from '../reducers';\n\nconst configureStore = () => {\n    // const sagaMiddleware = createSagaMiddleware();\n    return {\n        ...createStore(reducer)\n        // runSaga: sagaMiddleware.run(rootSaga)\n    };\n};\n\nexport default configureStore;\n// redux saga is a library that aims to make side effects in react-redux applications easier and better","import React, { Component } from 'react';\nimport Routes from './routes';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='image'>\n        <Routes />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store/configureStore';\nimport { Provider } from 'react-redux';\n\n// const store = configureStore;\n{/* <BrowserRouter> */ }\n\n// <Provider store={store}>\nReactDOM.render(<App />, document.getElementById('root'));\n// </Provider>\n// </BrowserRouter>\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}